name: Delete Closed Issues

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:     # Allow manual triggering

jobs:
  delete-closed-issues:
    runs-on: ubuntu-latest
    
    steps:
      - name: Delete closed issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            // Get closed issues using REST API (for listing)
            const closedIssues = await github.paginate(github.rest.issues.listForRepo, {
              owner,
              repo,
              state: 'closed',
              per_page: 100
            });
            
            // Filter issues by age (optional)
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            const issuesToDelete = closedIssues.filter(issue => {
              const closedAt = new Date(issue.closed_at);
              return closedAt < thirtyDaysAgo;
            });
            
            console.log(`Found ${issuesToDelete.length} closed issues to delete`);
            
            // Delete issues using GraphQL API
            let deletedCount = 0;
            for (const issue of issuesToDelete) {
              try {
                // First, get the global ID of the issue (required for GraphQL)
                const response = await github.graphql(`
                  query {
                    repository(owner: "${owner}", name: "${repo}") {
                      issue(number: ${issue.number}) {
                        id
                      }
                    }
                  }
                `);
                
                const issueId = response.repository.issue.id;
                
                // Now delete the issue
                await github.graphql(`
                  mutation {
                    deleteIssue(input: {issueId: "${issueId}"}) {
                      clientMutationId
                    }
                  }
                `);
                
                console.log(`Deleted issue #${issue.number}: ${issue.title}`);
                deletedCount++;
              } catch (error) {
                console.error(`Failed to delete issue #${issue.number}: ${error.message}`);
              }
            }
            
            console.log(`Successfully deleted ${deletedCount} out of ${issuesToDelete.length} closed issues`);